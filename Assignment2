import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Load the dataset
file_path = "superstore_sales.csv"

# Check if the file exists before loading
if not os.path.exists(file_path):
    print(f"Error: The file '{file_path}' was not found. Please check the file path.")
    exit()

df = pd.read_csv(file_path)

# Display basic dataset info
print(df.info())

# Fill missing values in 'Postal Code' if present
if 'Postal Code' in df.columns:
    df['Postal Code'].fillna(0, inplace=True)

# Drop unnecessary columns safely
drop_columns = ['Order ID', 'Customer Name', 'Customer ID', 'Product ID']
df.drop(columns=[col for col in drop_columns if col in df.columns], inplace=True)

# Convert date column to datetime
df['Order Date'] = pd.to_datetime(df['Order Date'], dayfirst=True)

# Extract relevant time features
df['Year'] = df['Order Date'].dt.year
df['Month'] = df['Order Date'].dt.month
df['Day'] = df['Order Date'].dt.day

# Encode categorical variables
label_encoders = {}
categorical_cols = df.select_dtypes(include=['object']).columns.tolist()

for col in categorical_cols:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le  # Store encoder for future use

# Define features and target variable
X = df.drop(columns=['Sales', 'Order Date'])  # Drop target and date columns
y = df['Sales']

# Split data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=10)

# Scale numerical features (important for KNN)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Initialize models with tuned hyperparameters
models = {
    "Linear Regression": LinearRegression(),
    "Decision Tree": DecisionTreeRegressor(max_depth=8, random_state=10),
    "Random Forest": RandomForestRegressor(n_estimators=150, max_depth=12, random_state=10),
    "KNN": KNeighborsRegressor(n_neighbors=7)
}

# Train and evaluate models
results = {}

for model_name, model in models.items():
    # Fit the model
    if model_name == "KNN":  # Use scaled data for KNN
        model.fit(X_train_scaled, y_train)
        y_pred = model.predict(X_test_scaled)
    else:
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

    # Compute evaluation metrics
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_test, y_pred)

    # Store results
    results[model_name] = {"MSE": round(mse, 2), "MAE": round(mae, 2), "RMSE": round(rmse, 2), "RÂ²": round(r2, 2)}

# Display performance metrics
performance_df = pd.DataFrame(results).T
print(performance_df)

# Plot model comparison
performance_df[['MSE', 'MAE', 'RMSE']].plot(kind='bar', figsize=(10, 6), title="Model Performance Comparison")
plt.ylabel("Error Metrics")
plt.show()